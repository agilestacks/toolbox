#!/bin/sh

USER=${USER:-root}
UID=${UID:-$(id -u)}
GID=${GID:-$(id -g)}
HOME=${HOME:=/home/$USER}

SHELL="${SHELL:-/bin/bash}"
# shellcheck disable=SC2124
ARGS=${@:-$SHELL}

test -f /etc/version || touch /etc/version

echo "Starting toolbox $(cat /etc/version)..."

# interactive
if test -n "$PS1"; then
    echo "  interactive mode ${SHELL##*/}"
fi

if test -z "$TMPDIR"; then
    export TMPDIR=/tmp
fi

# write GCP credentials into file
case "$GOOGLE_APPLICATION_CREDENTIALS" in {*)
    file=$(mktemp -t google-application-credentials.json.XXXXXX)
    echo "$GOOGLE_APPLICATION_CREDENTIALS" > $file
    chmod 0644 $file
    export GOOGLE_APPLICATION_CREDENTIALS=$file
esac


if test "$USER" = "root"; then
    export HOME="/root"

    # shellcheck disable=SC2086
    tini -s -- $ARGS
    status=$?
else
    echo "  configure $USER user"
    groupadd -g "$GID" "$USER"
    useradd -m -d "$HOME" -s "$SHELL" -u "$UID" -g "$GID" -G docker "$USER" 2>&1 | \
        grep -v 'Creating mailbox file: No such file or directory'
    chown -R $UID:$GID /workspace

    if ! test -f $HOME/.terraformrc; then
        cp -f /usr/local/share/.terraformrc $HOME/.terraformrc
        chown $UID:$GID $HOME/.terraformrc
    fi

    # bring in custom Terraform plugins and pre-seeded plugin cache
    export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"
    if ! test -d $HOME/.terraform.d/plugin-cache/linux_amd64; then
        mkdir -p $HOME/.terraform.d/plugin-cache/linux_amd64
        ln /root/.terraform.d/plugin-cache/linux_amd64/* $HOME/.terraform.d/plugin-cache/linux_amd64/ 2>/dev/null ||
            cp /root/.terraform.d/plugin-cache/linux_amd64/* $HOME/.terraform.d/plugin-cache/linux_amd64/
        chown -R $UID:$GID $HOME/.terraform.d
    fi
    # if ! test -d $HOME/.terraform.d/plugins/linux_amd64; then
    #     mkdir -p $HOME/.terraform.d/plugins/linux_amd64
    #     chown $UID:$GID $HOME/.terraform.d/plugins/linux_amd64
    #     ln /root/.terraform.d/plugins/linux_amd64/* $HOME/.terraform.d/plugins/linux_amd64/
    # fi

    # wrapper script also starts docker daemon
    # doesn't work on Mac? - long timeout
    if test -z "$TOOLBOX_NO_DOCKER"; then
        docker version > /dev/null
        echo "  dockerd started"
    fi

    # shellcheck disable=SC2086
    gosu "$USER" tini -s -- $ARGS
    status=$?
fi

pkill -f /opt/halyard/lib/halyard-web
pkill -f /usr/local/bin/docker-containerd
exit $status
